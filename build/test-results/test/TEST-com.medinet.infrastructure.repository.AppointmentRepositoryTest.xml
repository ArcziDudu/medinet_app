<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.medinet.infrastructure.repository.AppointmentRepositoryTest" tests="4" skipped="0" failures="0" errors="0" timestamp="2023-07-27T20:38:15" hostname="ARTUR" time="0.888">
  <properties/>
  <testcase name="testRemoveAppointment()" classname="com.medinet.infrastructure.repository.AppointmentRepositoryTest" time="0.662"/>
  <testcase name="testFindAllByStatus()" classname="com.medinet.infrastructure.repository.AppointmentRepositoryTest" time="0.121"/>
  <testcase name="testSaveAppointment()" classname="com.medinet.infrastructure.repository.AppointmentRepositoryTest" time="0.047"/>
  <testcase name="testFindByDateOfAppointmentAndTimeOfVisit()" classname="com.medinet.infrastructure.repository.AppointmentRepositoryTest" time="0.052"/>
  <system-out><![CDATA[2023-07-27T22:37:50.193+02:00  INFO 176508 --- [    Test worker] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.medinet.infrastructure.repository.AppointmentRepositoryTest]: AppointmentRepositoryTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2023-07-27T22:37:50.267+02:00  INFO 176508 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.medinet.Application for test class com.medinet.infrastructure.repository.AppointmentRepositoryTest

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::                (v3.1.1)

2023-07-27T22:37:50.381+02:00  WARN 176508 --- [    Test worker] ory$DuplicateJsonObjectContextCustomizer : 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/C:/Users/artur/.gradle/caches/modules-2/files-2.1/org.json/json/20160810/aca5eb39e2a12fddd6c472b240afe9ebea3a6733/json-20160810.jar!/org/json/JSONObject.class
	jar:file:/C:/Users/artur/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2023-07-27T22:37:50.384+02:00  INFO 176508 --- [    Test worker] c.m.i.r.AppointmentRepositoryTest        : Starting AppointmentRepositoryTest using Java 18.0.2 with PID 176508 (started by artur in C:\Users\artur\IdeaProjects\medinet_app_final)
2023-07-27T22:37:50.385+02:00  INFO 176508 --- [    Test worker] c.m.i.r.AppointmentRepositoryTest        : No active profile set, falling back to 1 default profile: "default"
2023-07-27T22:37:51.023+02:00  INFO 176508 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2023-07-27T22:37:51.246+02:00  INFO 176508 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 196 ms. Found 7 JPA repository interfaces.
2023-07-27T22:37:51.707+02:00  INFO 176508 --- [    Test worker] o.t.utility.ImageNameSubstitutor         : Image name substitution will be performed by: DefaultImageNameSubstitutor (composite of 'ConfigurationFileImageNameSubstitutor' and 'PrefixingImageNameSubstitutor')
2023-07-27T22:37:51.766+02:00  INFO 176508 --- [    Test worker] o.t.d.DockerClientProviderStrategy       : Loaded org.testcontainers.dockerclient.NpipeSocketClientProviderStrategy from ~/.testcontainers.properties, will try it first
2023-07-27T22:37:53.414+02:00  INFO 176508 --- [    Test worker] o.t.d.DockerClientProviderStrategy       : Found Docker environment with local Npipe socket (npipe:////./pipe/docker_engine)
2023-07-27T22:37:53.418+02:00  INFO 176508 --- [    Test worker] org.testcontainers.DockerClientFactory   : Docker host IP address is localhost
2023-07-27T22:37:53.474+02:00  INFO 176508 --- [    Test worker] org.testcontainers.DockerClientFactory   : Connected to docker: 
  Server Version: 23.0.5
  API Version: 1.42
  Operating System: Docker Desktop
  Total Memory: 3829 MB
2023-07-27T22:37:53.576+02:00  INFO 176508 --- [    Test worker] docker[testcontainers/ryuk:0.3.4]        : Creating container for image: testcontainers/ryuk:0.3.4
2023-07-27T22:37:54.438+02:00  INFO 176508 --- [    Test worker] o.t.utility.RegistryAuthLocator          : Credential helper/store (docker-credential-desktop) does not have credentials for https://index.docker.io/v1/
2023-07-27T22:37:54.876+02:00  INFO 176508 --- [    Test worker] docker[testcontainers/ryuk:0.3.4]        : Container testcontainers/ryuk:0.3.4 is starting: df35f0e3516d8d4a1624078654c296ed16c1671f5f1bee83f5b582dd0e94930b
2023-07-27T22:37:56.885+02:00  INFO 176508 --- [    Test worker] docker[testcontainers/ryuk:0.3.4]        : Container testcontainers/ryuk:0.3.4 started in PT3.3839046S
2023-07-27T22:37:56.998+02:00  INFO 176508 --- [    Test worker] o.t.utility.RyukResourceReaper           : Ryuk started - will monitor and terminate Testcontainers containers on JVM exit
2023-07-27T22:37:56.999+02:00  INFO 176508 --- [    Test worker] org.testcontainers.DockerClientFactory   : Checking the system...
2023-07-27T22:37:57.001+02:00  INFO 176508 --- [    Test worker] org.testcontainers.DockerClientFactory   : ?? Docker server version should be at least 1.6.0
2023-07-27T22:37:57.003+02:00  INFO 176508 --- [    Test worker] docker[postgres:15.0]                    : Creating container for image: postgres:15.0
2023-07-27T22:37:57.168+02:00  INFO 176508 --- [    Test worker] docker[postgres:15.0]                    : Container postgres:15.0 is starting: 9ba237483ec9d5a194577ec47e338f14e61ba15fd9e9c81df2c1c6ad2e570059
2023-07-27T22:38:03.844+02:00  INFO 176508 --- [    Test worker] docker[postgres:15.0]                    : Container postgres:15.0 started in PT6.841484S
2023-07-27T22:38:04.069+02:00  INFO 176508 --- [    Test worker] o.f.c.internal.license.VersionPrinter    : Flyway Community Edition 9.16.3 by Redgate
2023-07-27T22:38:04.070+02:00  INFO 176508 --- [    Test worker] o.f.c.internal.license.VersionPrinter    : See release notes here: https://rd.gt/416ObMi
2023-07-27T22:38:04.070+02:00  INFO 176508 --- [    Test worker] o.f.c.internal.license.VersionPrinter    : 
2023-07-27T22:38:04.099+02:00  INFO 176508 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2023-07-27T22:38:04.517+02:00  INFO 176508 --- [    Test worker] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@4feb7abb
2023-07-27T22:38:04.521+02:00  INFO 176508 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2023-07-27T22:38:04.559+02:00  INFO 176508 --- [    Test worker] o.f.c.i.database.base.BaseDatabaseType   : Database: jdbc:postgresql://localhost:52348/test (PostgreSQL 15.0)
2023-07-27T22:38:04.712+02:00  INFO 176508 --- [    Test worker] o.f.c.i.s.JdbcTableSchemaHistory         : Schema history table "public"."flyway_schema_history" does not exist yet
2023-07-27T22:38:04.725+02:00  INFO 176508 --- [    Test worker] o.f.core.internal.command.DbValidate     : Successfully validated 8 migrations (execution time 00:00.085s)
2023-07-27T22:38:04.789+02:00  INFO 176508 --- [    Test worker] o.f.c.i.s.JdbcTableSchemaHistory         : Creating Schema History table "public"."flyway_schema_history" ...
2023-07-27T22:38:04.917+02:00  INFO 176508 --- [    Test worker] o.f.core.internal.command.DbMigrate      : Current version of schema "public": << Empty Schema >>
2023-07-27T22:38:04.941+02:00  INFO 176508 --- [    Test worker] o.f.core.internal.command.DbMigrate      : Migrating schema "public" to version "1.1 - init medinet database address"
2023-07-27T22:38:05.042+02:00  INFO 176508 --- [    Test worker] o.f.core.internal.command.DbMigrate      : Migrating schema "public" to version "1.2 - init medinet database doctor"
2023-07-27T22:38:05.123+02:00  INFO 176508 --- [    Test worker] o.f.core.internal.command.DbMigrate      : Migrating schema "public" to version "1.3 - init medinet database calendar"
2023-07-27T22:38:05.198+02:00  INFO 176508 --- [    Test worker] o.f.core.internal.command.DbMigrate      : Migrating schema "public" to version "1.4 - init medinet database patient"
2023-07-27T22:38:05.278+02:00  INFO 176508 --- [    Test worker] o.f.core.internal.command.DbMigrate      : Migrating schema "public" to version "1.5 - init medinet database appointment"
2023-07-27T22:38:05.352+02:00  INFO 176508 --- [    Test worker] o.f.core.internal.command.DbMigrate      : Migrating schema "public" to version "1.6 - init medinet database opinion"
2023-07-27T22:38:05.438+02:00  INFO 176508 --- [    Test worker] o.f.core.internal.command.DbMigrate      : Migrating schema "public" to version "2.1 - security tabels"
2023-07-27T22:38:05.846+02:00  INFO 176508 --- [    Test worker] o.f.core.internal.command.DbMigrate      : Migrating schema "public" to version "2.2 - init Data"
2023-07-27T22:38:07.877+02:00  INFO 176508 --- [    Test worker] o.f.core.internal.command.DbMigrate      : Successfully applied 8 migrations to schema "public", now at version v2.2 (execution time 00:03.002s)
2023-07-27T22:38:08.139+02:00  INFO 176508 --- [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2023-07-27T22:38:08.365+02:00  INFO 176508 --- [    Test worker] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.2.5.Final
2023-07-27T22:38:08.378+02:00  INFO 176508 --- [    Test worker] org.hibernate.cfg.Environment            : HHH000406: Using bytecode reflection optimizer
2023-07-27T22:38:08.859+02:00  INFO 176508 --- [    Test worker] o.h.b.i.BytecodeProviderInitiator        : HHH000021: Bytecode provider name : bytebuddy
2023-07-27T22:38:08.902+02:00  INFO 176508 --- [    Test worker] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2023-07-27T22:38:09.795+02:00  INFO 176508 --- [    Test worker] o.h.b.i.BytecodeProviderInitiator        : HHH000021: Bytecode provider name : bytebuddy
2023-07-27T22:38:12.032+02:00  INFO 176508 --- [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2023-07-27T22:38:12.042+02:00  INFO 176508 --- [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2023-07-27T22:38:13.349+02:00  INFO 176508 --- [    Test worker] o.s.d.j.r.query.QueryEnhancerFactory     : Hibernate is in classpath; If applicable, HQL parser will be used.
2023-07-27T22:38:15.146+02:00  INFO 176508 --- [    Test worker] c.m.i.r.AppointmentRepositoryTest        : Started AppointmentRepositoryTest in 24.875 seconds (process running for 55.258)
Hibernate: select a1_0.appointment_id,a1_0.uuid,a1_0.calendar_id,a1_0.date_of_appointment,d1_0.doctor_id,a2_0.address_id,a2_0.city,a2_0.country,a2_0.postal_code,a2_0.street,c1_0.doctor_id,c1_0.calendar_id,c1_0.date,c1_0.hours,d1_0.email,d1_0.name,d1_0.price_for_visit,d1_0.specialization,d1_0.surname,u1_0.user_id,u1_0.active,u1_0.email,u1_0.password,a1_0.time_of_issue,a1_0.note,p1_0.patient_id,a3_0.address_id,a3_0.city,a3_0.country,a3_0.postal_code,a3_0.street,p1_0.email,p1_0.name,p1_0.phone,p1_0.surname,u2_0.user_id,u2_0.active,u2_0.email,u2_0.password,a1_0.status,a1_0.time_of_visit from appointment a1_0 left join doctor d1_0 on d1_0.doctor_id=a1_0.doctor_id left join address a2_0 on a2_0.address_id=d1_0.address_id left join calendar c1_0 on d1_0.doctor_id=c1_0.doctor_id left join medinet_user u1_0 on u1_0.user_id=d1_0.user_id left join patient p1_0 on p1_0.patient_id=a1_0.patient_id left join address a3_0 on a3_0.address_id=p1_0.address_id left join medinet_user u2_0 on u2_0.user_id=p1_0.user_id where a1_0.appointment_id=?
Hibernate: select d1_0.doctor_id,a1_0.address_id,a1_0.city,a1_0.country,a1_0.postal_code,a1_0.street,d1_0.email,d1_0.name,d1_0.price_for_visit,d1_0.specialization,d1_0.surname,u1_0.user_id,u1_0.active,u1_0.email,u1_0.password from doctor d1_0 left join address a1_0 on a1_0.address_id=d1_0.address_id left join medinet_user u1_0 on u1_0.user_id=d1_0.user_id where d1_0.doctor_id=?
Hibernate: select p1_0.patient_id,a1_0.address_id,a1_0.city,a1_0.country,a1_0.postal_code,a1_0.street,p1_0.email,p1_0.name,p1_0.phone,p1_0.surname,u1_0.user_id,u1_0.active,u1_0.email,u1_0.password from patient p1_0 left join address a1_0 on a1_0.address_id=p1_0.address_id left join medinet_user u1_0 on u1_0.user_id=p1_0.user_id where p1_0.patient_id=?
Hibernate: insert into appointment (uuid,calendar_id,date_of_appointment,doctor_id,time_of_issue,note,patient_id,status,time_of_visit) values (?,?,?,?,?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.uuid,a1_0.calendar_id,a1_0.date_of_appointment,a1_0.doctor_id,a1_0.time_of_issue,a1_0.note,a1_0.patient_id,a1_0.status,a1_0.time_of_visit from appointment a1_0 where a1_0.appointment_id=?
Hibernate: delete from appointment where appointment_id=?
Hibernate: select a1_0.appointment_id,a1_0.uuid,a1_0.calendar_id,a1_0.date_of_appointment,a1_0.doctor_id,a1_0.time_of_issue,a1_0.note,a1_0.patient_id,a1_0.status,a1_0.time_of_visit from appointment a1_0
Hibernate: select a1_0.appointment_id,a1_0.uuid,a1_0.calendar_id,a1_0.date_of_appointment,d1_0.doctor_id,a2_0.address_id,a2_0.city,a2_0.country,a2_0.postal_code,a2_0.street,c1_0.doctor_id,c1_0.calendar_id,c1_0.date,c1_0.hours,d1_0.email,d1_0.name,d1_0.price_for_visit,d1_0.specialization,d1_0.surname,u1_0.user_id,u1_0.active,u1_0.email,u1_0.password,a1_0.time_of_issue,a1_0.note,p1_0.patient_id,a3_0.address_id,a3_0.city,a3_0.country,a3_0.postal_code,a3_0.street,p1_0.email,p1_0.name,p1_0.phone,p1_0.surname,u2_0.user_id,u2_0.active,u2_0.email,u2_0.password,a1_0.status,a1_0.time_of_visit from appointment a1_0 left join doctor d1_0 on d1_0.doctor_id=a1_0.doctor_id left join address a2_0 on a2_0.address_id=d1_0.address_id left join calendar c1_0 on d1_0.doctor_id=c1_0.doctor_id left join medinet_user u1_0 on u1_0.user_id=d1_0.user_id left join patient p1_0 on p1_0.patient_id=a1_0.patient_id left join address a3_0 on a3_0.address_id=p1_0.address_id left join medinet_user u2_0 on u2_0.user_id=p1_0.user_id where a1_0.appointment_id=?
Hibernate: select d1_0.doctor_id,a1_0.address_id,a1_0.city,a1_0.country,a1_0.postal_code,a1_0.street,d1_0.email,d1_0.name,d1_0.price_for_visit,d1_0.specialization,d1_0.surname,u1_0.user_id,u1_0.active,u1_0.email,u1_0.password from doctor d1_0 left join address a1_0 on a1_0.address_id=d1_0.address_id left join medinet_user u1_0 on u1_0.user_id=d1_0.user_id where d1_0.doctor_id=?
Hibernate: select p1_0.patient_id,a1_0.address_id,a1_0.city,a1_0.country,a1_0.postal_code,a1_0.street,p1_0.email,p1_0.name,p1_0.phone,p1_0.surname,u1_0.user_id,u1_0.active,u1_0.email,u1_0.password from patient p1_0 left join address a1_0 on a1_0.address_id=p1_0.address_id left join medinet_user u1_0 on u1_0.user_id=p1_0.user_id where p1_0.patient_id=?
Hibernate: insert into appointment (uuid,calendar_id,date_of_appointment,doctor_id,time_of_issue,note,patient_id,status,time_of_visit) values (?,?,?,?,?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.uuid,a1_0.calendar_id,a1_0.date_of_appointment,d1_0.doctor_id,a2_0.address_id,a2_0.city,a2_0.country,a2_0.postal_code,a2_0.street,c1_0.doctor_id,c1_0.calendar_id,c1_0.date,c1_0.hours,d1_0.email,d1_0.name,d1_0.price_for_visit,d1_0.specialization,d1_0.surname,u1_0.user_id,u1_0.active,u1_0.email,u1_0.password,a1_0.time_of_issue,a1_0.note,p1_0.patient_id,a3_0.address_id,a3_0.city,a3_0.country,a3_0.postal_code,a3_0.street,p1_0.email,p1_0.name,p1_0.phone,p1_0.surname,u2_0.user_id,u2_0.active,u2_0.email,u2_0.password,a1_0.status,a1_0.time_of_visit from appointment a1_0 left join doctor d1_0 on d1_0.doctor_id=a1_0.doctor_id left join address a2_0 on a2_0.address_id=d1_0.address_id left join calendar c1_0 on d1_0.doctor_id=c1_0.doctor_id left join medinet_user u1_0 on u1_0.user_id=d1_0.user_id left join patient p1_0 on p1_0.patient_id=a1_0.patient_id left join address a3_0 on a3_0.address_id=p1_0.address_id left join medinet_user u2_0 on u2_0.user_id=p1_0.user_id where a1_0.appointment_id=?
Hibernate: insert into appointment (uuid,calendar_id,date_of_appointment,doctor_id,time_of_issue,note,patient_id,status,time_of_visit) values (?,?,?,?,?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.uuid,a1_0.calendar_id,a1_0.date_of_appointment,a1_0.doctor_id,a1_0.time_of_issue,a1_0.note,a1_0.patient_id,a1_0.status,a1_0.time_of_visit from appointment a1_0 where a1_0.status=?
Hibernate: select a1_0.appointment_id,a1_0.uuid,a1_0.calendar_id,a1_0.date_of_appointment,d1_0.doctor_id,a2_0.address_id,a2_0.city,a2_0.country,a2_0.postal_code,a2_0.street,c1_0.doctor_id,c1_0.calendar_id,c1_0.date,c1_0.hours,d1_0.email,d1_0.name,d1_0.price_for_visit,d1_0.specialization,d1_0.surname,u1_0.user_id,u1_0.active,u1_0.email,u1_0.password,a1_0.time_of_issue,a1_0.note,p1_0.patient_id,a3_0.address_id,a3_0.city,a3_0.country,a3_0.postal_code,a3_0.street,p1_0.email,p1_0.name,p1_0.phone,p1_0.surname,u2_0.user_id,u2_0.active,u2_0.email,u2_0.password,a1_0.status,a1_0.time_of_visit from appointment a1_0 left join doctor d1_0 on d1_0.doctor_id=a1_0.doctor_id left join address a2_0 on a2_0.address_id=d1_0.address_id left join calendar c1_0 on d1_0.doctor_id=c1_0.doctor_id left join medinet_user u1_0 on u1_0.user_id=d1_0.user_id left join patient p1_0 on p1_0.patient_id=a1_0.patient_id left join address a3_0 on a3_0.address_id=p1_0.address_id left join medinet_user u2_0 on u2_0.user_id=p1_0.user_id where a1_0.appointment_id=?
Hibernate: select d1_0.doctor_id,a1_0.address_id,a1_0.city,a1_0.country,a1_0.postal_code,a1_0.street,d1_0.email,d1_0.name,d1_0.price_for_visit,d1_0.specialization,d1_0.surname,u1_0.user_id,u1_0.active,u1_0.email,u1_0.password from doctor d1_0 left join address a1_0 on a1_0.address_id=d1_0.address_id left join medinet_user u1_0 on u1_0.user_id=d1_0.user_id where d1_0.doctor_id=?
Hibernate: select p1_0.patient_id,a1_0.address_id,a1_0.city,a1_0.country,a1_0.postal_code,a1_0.street,p1_0.email,p1_0.name,p1_0.phone,p1_0.surname,u1_0.user_id,u1_0.active,u1_0.email,u1_0.password from patient p1_0 left join address a1_0 on a1_0.address_id=p1_0.address_id left join medinet_user u1_0 on u1_0.user_id=p1_0.user_id where p1_0.patient_id=?
Hibernate: insert into appointment (uuid,calendar_id,date_of_appointment,doctor_id,time_of_issue,note,patient_id,status,time_of_visit) values (?,?,?,?,?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.uuid,a1_0.calendar_id,a1_0.date_of_appointment,a1_0.doctor_id,a1_0.time_of_issue,a1_0.note,a1_0.patient_id,a1_0.status,a1_0.time_of_visit from appointment a1_0
Hibernate: select a1_0.appointment_id,a1_0.uuid,a1_0.calendar_id,a1_0.date_of_appointment,d1_0.doctor_id,a2_0.address_id,a2_0.city,a2_0.country,a2_0.postal_code,a2_0.street,c1_0.doctor_id,c1_0.calendar_id,c1_0.date,c1_0.hours,d1_0.email,d1_0.name,d1_0.price_for_visit,d1_0.specialization,d1_0.surname,u1_0.user_id,u1_0.active,u1_0.email,u1_0.password,a1_0.time_of_issue,a1_0.note,p1_0.patient_id,a3_0.address_id,a3_0.city,a3_0.country,a3_0.postal_code,a3_0.street,p1_0.email,p1_0.name,p1_0.phone,p1_0.surname,u2_0.user_id,u2_0.active,u2_0.email,u2_0.password,a1_0.status,a1_0.time_of_visit from appointment a1_0 left join doctor d1_0 on d1_0.doctor_id=a1_0.doctor_id left join address a2_0 on a2_0.address_id=d1_0.address_id left join calendar c1_0 on d1_0.doctor_id=c1_0.doctor_id left join medinet_user u1_0 on u1_0.user_id=d1_0.user_id left join patient p1_0 on p1_0.patient_id=a1_0.patient_id left join address a3_0 on a3_0.address_id=p1_0.address_id left join medinet_user u2_0 on u2_0.user_id=p1_0.user_id where a1_0.appointment_id=?
Hibernate: select d1_0.doctor_id,a1_0.address_id,a1_0.city,a1_0.country,a1_0.postal_code,a1_0.street,d1_0.email,d1_0.name,d1_0.price_for_visit,d1_0.specialization,d1_0.surname,u1_0.user_id,u1_0.active,u1_0.email,u1_0.password from doctor d1_0 left join address a1_0 on a1_0.address_id=d1_0.address_id left join medinet_user u1_0 on u1_0.user_id=d1_0.user_id where d1_0.doctor_id=?
Hibernate: select p1_0.patient_id,a1_0.address_id,a1_0.city,a1_0.country,a1_0.postal_code,a1_0.street,p1_0.email,p1_0.name,p1_0.phone,p1_0.surname,u1_0.user_id,u1_0.active,u1_0.email,u1_0.password from patient p1_0 left join address a1_0 on a1_0.address_id=p1_0.address_id left join medinet_user u1_0 on u1_0.user_id=p1_0.user_id where p1_0.patient_id=?
Hibernate: insert into appointment (uuid,calendar_id,date_of_appointment,doctor_id,time_of_issue,note,patient_id,status,time_of_visit) values (?,?,?,?,?,?,?,?,?)
Hibernate: select a1_0.appointment_id,a1_0.uuid,a1_0.calendar_id,a1_0.date_of_appointment,a1_0.doctor_id,a1_0.time_of_issue,a1_0.note,a1_0.patient_id,a1_0.status,a1_0.time_of_visit from appointment a1_0 where a1_0.date_of_appointment=? and a1_0.time_of_visit=?
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
